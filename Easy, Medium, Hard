EASY:

1. Revising the Select Query I

SELECT *
FROM CITY
WHERE POPULATION > 100000
AND COUNTRYCODE = 'USA';

"""

2. Revising the Select Query II

SELECT NAME
FROM CITY
WHERE POPULATION > 120000
AND COUNTRYCODE = 'USA';

"""

3.Select All

SELECT *
FROM CITY;

"""

4.Select By ID

SELECT *
FROM CITY
WHERE ID = 1661;

"""

5.Japanese Cities' Attributes

SELECT *
FROM CITY
WHERE COUNTRYCODE = 'JPN';

"""

6.Japanese Cities' Names

SELECT NAME
FROM CITY
WHERE COUNTRYCODE = 'JPN';

"""

7.Weather Observation Station 1

SELECT CITY, STATE
FROM STATION;

"""

8.Weather Observation Station 3

SELECT DISTINCT CITY
FROM STATION
WHERE ID % 2 = 0;

"""

9.Weather Observation Station 4

SELECT COUNT(*) - COUNT(DISTINCT CITY)
FROM STATION;

"""

10.Weather Observation Station 5
1)
SELECT CITY, LENGTH(CITY)
FROM STATION
ORDER BY LENGTH(CITY) DESC, CITY
LIMIT 1;
SELECT CITY, LENGTH(CITY)
FROM STATION
ORDER BY LENGTH(CITY), CITY
LIMIT 1;

2)
SELECT CITY, LENGTH(CITY)
FROM (SELECT CITY, 
             LENGTH(CITY),
             RANK() OVER (ORDER BY LENGTH(CITY) DESC, CITY) AS rnk1,
             RANK() OVER (ORDER BY LENGTH(CITY), CITY) AS rnk2
      FROM STATION) t
WHERE rnk1 = 1 OR rnk2 = 1;

"""

11.Weather Observation Station 6

SELECT CITY
FROM STATION
WHERE LEFT(CITY, 1) IN ('A', 'E', 'I', 'O', 'U');

"""

12.Weather Observation Station 7

SELECT DISTINCT CITY
FROM STATION
WHERE RIGHT(CITY, 1) IN ('A', 'E', 'I', 'O', 'U');

"""

13.Weather Observation Station 8

SELECT CITY
FROM STATION
WHERE LEFT(CITY, 1) IN ('A', 'E', 'I', 'O', 'U')
AND RIGHT(CITY, 1) IN ('A', 'E', 'I', 'O', 'U');

"""

14.Weather Observation Station 9

SELECT DISTINCT CITY
FROM STATION
WHERE LEFT(CITY, 1) NOT IN ('A', 'E', 'I', 'O', 'U');

"""

15.Weather Observation Station 10

SELECT DISTINCT CITY
FROM STATION
WHERE RIGHT(CITY, 1) NOT IN ('A', 'E', 'I', 'O', 'U');

"""

16.Weather Observation Station 11

SELECT DISTINCT CITY
FROM STATION
WHERE LEFT(CITY, 1) NOT IN ('A', 'E', 'I', 'O', 'U')
OR RIGHT(CITY, 1) NOT IN ('A', 'E', 'I', 'O', 'U');

"""

17.Weather Observation Station 12

SELECT DISTINCT CITY
FROM STATION
WHERE LEFT(CITY, 1) NOT IN ('A', 'E', 'I', 'O', 'U')
AND RIGHT(CITY, 1) NOT IN ('A', 'E', 'I', 'O', 'U');

"""

18.Higher Than 75 Marks

SELECT Name
FROM STUDENTS
WHERE Marks > 75
ORDER BY RIGHT(Name, 3), ID;

"""

19.Employee Names

SELECT name
FROM Employee
ORDER BY name;

"""

20.Employee Salaries

SELECT name
FROM Employee
WHERE salary > 2000
AND months < 10;

"""

21.Type of Triangle

SELECT CASE WHEN A + B <= C OR A + C <= B OR B + C <= A THEN 'Not A Triangle'
            WHEN A = B AND B = C THEN 'Equilateral'
            WHEN A = B OR A = C OR B = C THEN 'Isosceles'
            ELSE 'Scalene' END 
FROM TRIANGLES;

"""

22.Revising Aggregations - The Count Function

SELECT COUNT(*)
FROM CITY
WHERE POPULATION > 100000;

"""

23.Revising Aggregations - The Sum Function

SELECT SUM(POPULATION)
FROM CITY
WHERE DISTRICT = 'California';

"""

24.Revising Aggregations - Averages

SELECT AVG(POPULATION)
FROM CITY
WHERE DISTRICT = 'California';

"""

25.Average Population

SELECT ROUND(AVG(POPULATION))
FROM CITY;

"""

26.Japan Population

SELECT SUM(POPULATION)
FROM CITY
WHERE COUNTRYCODE = 'JPN';

"""

27.Population Density Difference

SELECT MAX(POPULATION) - MIN(POPULATION)
FROM CITY;

"""

28.The Blunder

SELECT CEIL(AVG(salary) - AVG(REPLACE(salary, 0, '')))
FROM EMPLOYEES;

"""

29.Top Earners
1)
SELECT salary * months AS earnings, COUNT(*)
FROM Employee
GROUP BY earnings
ORDER BY earnings DESC
LIMIT 1;
2)
SELECT CONCAT(MAX(months * salary), '  ', COUNT(employee_id))
FROM Employee
WHERE months * salary = (SELECT MAX(months * salary) FROM Employee);

"""

30.Weather Observation Station 2

SELECT ROUND(SUM(LAT_N), 2) AS lat, ROUND(SUM(LONG_W), 2) AS lon
FROM STATION;

"""

31.Weather Observation Station 13

SELECT TRUNCATE(SUM(LAT_N), 4)
FROM STATION
WHERE LAT_N > 38.7880 AND LAT_N < 137.2345;

"""

32.Weather Observation Station 14

SELECT TRUNCATE(MAX(LAT_N), 4)
FROM STATION
WHERE LAT_N < 137.2345;

"""

33.Weather Observation Station 15

SELECT ROUND(LONG_W, 4)
FROM STATION
WHERE LAT_N = (SELECT MAX(LAT_N)
               FROM STATION
               WHERE LAT_N < 137.2345);
               
"""

34.Weather Observation Station 16

SELECT ROUND(MIN(LAT_N), 4)
FROM STATION
WHERE LAT_N > 38.7780;

"""

35.Weather Observation Station 17

SELECT ROUND(LONG_W, 4)
FROM STATION
WHERE LAT_N = (SELECT MIN(LAT_N)
               FROM STATION
               WHERE LAT_N > 38.7780);

"""

36.Population Census

SELECT SUM(CITY.POPULATION)
FROM CITY
JOIN COUNTRY 
ON CITY.COUNTRYCODE = COUNTRY.CODE
WHERE CONTINENT = 'Asia';

"""

37.African Cities

SELECT CITY.NAME
FROM CITY
JOIN COUNTRY
ON CITY.COUNTRYCODE = COUNTRY.CODE
WHERE CONTINENT = 'Africa';

"""

38.Average Population of Each Continent

SELECT COUNTRY.CONTINENT, FLOOR(AVG(CITY.POPULATION))
FROM CITY
JOIN COUNTRY
ON CITY.COUNTRYCODE = COUNTRY.CODE
GROUP BY 1;

"""

39.Draw The Triangle 1

SET @row = 21;
SELECT REPEAT('* ', @row := @row - 1)
FROM information_schema.tables;

"""

40.Draw The Triangle 2

SET @row = 0;
SELECT REPEAT('* ', @row := @row + 1)
FROM information_schema.tables
WHERE @row <= 19;

"""

41.Occupations

SELECT MIN(IF(Occupation = 'Doctor', Name, NULL)) AS Doctor,
       MIN(IF(Occupation = 'Professor', Name, NULL)) AS Professor,
       MIN(IF(Occupation = 'Singer', Name, NULL)) AS Singer,
       MIN(IF(Occupation = 'Actor', Name, NULL)) AS Actor
FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY Occupation ORDER BY Name) AS row_no
      FROM OCCUPATIONS) t
GROUP BY row_no;

"""

42.New Companies


